#!/system/bin/sh

# === Configuration ===
HOSTS_FILE="/data/adb/modules/Malwack/system/etc/hosts"
TEMP_FILE="$(mktemp)"
LOG_FILE="/data/adb/malwack.log"
URLS_FILE="/data/adb/modules/Malwack/urls.txt"
CUSTOM_HOSTS_DIR="/data/adb/Malwack"
CUSTOM_HOSTS_FILE="$CUSTOM_HOSTS_DIR/custom_hosts.txt"
BLOCKED_APPS_FILE="$CUSTOM_HOSTS_DIR/blocked_apps.txt"

# === Ensure Directory Exists ===
mkdir -p "$CUSTOM_HOSTS_DIR"

# === Logging Function ===
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# === Abort on Error ===
abort() {
    log "Error: $1"
    exit 1
}

# === Get App UID ===
get_uid() {
    package="$1"
    uid="$(pm list packages -U | grep "^package:$package " | sed 's/.*uid:\([0-9]*\).*/\1/' | cut -d',' -f1)"
    if [ -n "$uid" ]; then
        echo "$uid"
        return 0
    fi
    return 1
}

# === Block App ===
block_app() {
    package="$1"
    [ -z "$package" ] && abort "Please provide a package name to block."
    
    uid=$(get_uid "$package")
    if [ $? -eq 0 ]; then
        iptables -I OUTPUT -m owner --uid-owner "$uid" -j REJECT
        ip6tables -I OUTPUT -m owner --uid-owner "$uid" -j REJECT
        echo "$package" >> "$BLOCKED_APPS_FILE"
        log "Blocked internet access for package: $package (UID: $uid)"
    else
        abort "Package $package not found"
    fi
}

# === Unblock App ===
unblock_app() {
    package="$1"
    [ -z "$package" ] && abort "Please provide a package name to unblock."
    
    uid=$(get_uid "$package")
    if [ $? -eq 0 ]; then
        iptables -D OUTPUT -m owner --uid-owner "$uid" -j REJECT 2>/dev/null
        ip6tables -D OUTPUT -m owner --uid-owner "$uid" -j REJECT 2>/dev/null
        sed -i "\|^$package$|d" "$BLOCKED_APPS_FILE"
        log "Unblocked internet access for package: $package (UID: $uid)"
    else
        abort "Package $package not found"
    fi
}

# === List Blocked Apps ===
list_blocked_apps() {
    if [ -f "$BLOCKED_APPS_FILE" ]; then
        echo "Currently blocked apps:"
        cat "$BLOCKED_APPS_FILE"
    else
        echo "No apps are currently blocked"
    fi
}

# === Add Custom Hosts ===
add_hosts() {
    url="$1"
    [ -z "$url" ] && abort "Please provide a URL for the hosts file."

    # Check if the URL is already listed in the custom hosts list
    if grep -Fxq "$url" "$CUSTOM_HOSTS_FILE"; then
        abort "The URL $url is already added to the custom hosts list."
    fi

    # Create a temporary file for the new hosts
    temp_hosts="$(mktemp)"

    # Attempt to download the hosts file from the URL
    if curl -s "$url" -o "$temp_hosts"; then
        # Check if the downloaded hosts content is already in HOSTS_FILE
        if grep -Fq "# BEGIN HOSTS FROM $url" "$HOSTS_FILE"; then
            log "Hosts from $url are already included in the hosts file."
            rm -f "$temp_hosts"
            return 0
        fi

        # Append the new hosts block to HOSTS_FILE
        echo "# BEGIN HOSTS FROM $url" >> "$HOSTS_FILE"
        cat "$temp_hosts" >> "$HOSTS_FILE"
        echo "# END HOSTS FROM $url" >> "$HOSTS_FILE"

        # Log the addition and update permissions
        echo "$url" >> "$CUSTOM_HOSTS_FILE"
        log "Added hosts from $url"
        chmod 644 "$HOSTS_FILE"
        rm -f "$temp_hosts"
    else
        # Cleanup and abort on failure
        rm -f "$temp_hosts"
        abort "Failed to download hosts from $url"
    fi
}

# == Custom URL ==
custom_url() {
    url="$1"
    [ -z "$url" ] && abort "Please provide a URL to block"
    
    # Check if the URL already exists in the hosts file
    if grep -qE "^[0-9.]+[[:space:]]+$url$" "$HOSTS_FILE"; then
        echo "Error: $url already exists in the hosts file."
        return 1
    fi
    
    # Add the URL to the hosts file
    echo "0.0.0.0 $url" >> "$HOSTS_FILE"
    chmod 644 "$HOSTS_FILE"
    echo "Added $url to the hosts file."
}



# === List Custom Hosts Sources ===
list_hosts() {
    if [ -f "$CUSTOM_HOSTS_FILE" ]; then
        echo "Custom hosts sources:"
        cat "$CUSTOM_HOSTS_FILE"
    else
        echo "No custom hosts sources configured"
    fi
}

# === Remove Custom Hosts ===
remove_hosts() {
    url="$1"
    [ -z "$url" ] && abort "Please provide a URL to remove."
    
    if grep -q "^$url$" "$CUSTOM_HOSTS_FILE"; then
        # Create a temporary file for the modified hosts
        temp_hosts="$(mktemp)"
        
        # Remove the section between markers
        sed "/# BEGIN HOSTS FROM $url/,/# END HOSTS FROM $url/d" "$HOSTS_FILE" > "$temp_hosts"
        mv "$temp_hosts" "$HOSTS_FILE"
        
        # Remove URL from custom hosts list
        sed -i "\|^$url$|d" "$CUSTOM_HOSTS_FILE"
        log "Removed hosts from $url"
        chmod 644 "$HOSTS_FILE"
    else
        abort "URL not found in custom hosts list"
    fi
}

# ===  Custom Hosts ===
update_hosts() {
    if [ -f "$CUSTOM_HOSTS_FILE" ]; then
        # Remove all custom hosts sections first
        while read -r url; do
            remove_hosts "$url"
        done < "$CUSTOM_HOSTS_FILE"
        
        # Re-add all custom hosts
        while read -r url; do
            add_hosts "$url"
        done < "$CUSTOM_HOSTS_FILE"
        chmod 644 "$HOSTS_FILE"
        log "Updated all custom hosts"
    else
        echo "No custom hosts to update"
    fi
}

# ===d Restore Originals ===
restore_original() {
    log "Restoring the hosts file to its original state..."
    chmod 644 "$HOSTS_FILE" || abort "Failed to set permissions on $HOSTS_FILE"
    [ -f "$HOSTS_FILE" ] && rm -f "$HOSTS_FILE"
    echo "127.0.0.1 localhost" > "$HOSTS_FILE"
    echo "::1 localhost" >> "$HOSTS_FILE"
    chmod 644 "$HOSTS_FILE"
    # Clear custom hosts list
    [ -f "$CUSTOM_HOSTS_FILE" ] && rm -f "$CUSTOM_HOSTS_FILE"
    log "Hosts file restored to its original state."
}

block_porn() {
    log "Blocking pornographic websites..."
    HOST_URL="https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/porn-only/hosts"

    if curl -s "$HOST_URL" -o "$TEMP_FILE"; then
        cat "$TEMP_FILE" >> "$HOSTS_FILE"
        echo -e "$HOST_URL" >> "$URLS_FILE"
        chmod 644 "$HOSTS_FILE"
        log "Pornographic sites have been blocked in the hosts file."
        rm -f "$TEMP_FILE"
    else
        abort "Failed to download blocking hosts file from $HOST_URL."
    fi
}

#== whitelist ==

whitelist_domain() {
    DOMAIN="$1"
    [ -z "$DOMAIN" ] && abort "Please provide a domain to whitelist."

    if grep -q "0\.0\.0\.0 $DOMAIN" "$HOSTS_FILE"; then
        sed "/0\.0\.0\.0 $DOMAIN/d" "$HOSTS_FILE" > "$TEMP_FILE"
        mv "$TEMP_FILE" "$HOSTS_FILE"
        chmod 644 "$HOSTS_FILE"
        log "Domain $DOMAIN has been whitelisted."
    else
        log "Domain $DOMAIN was not found in the hosts file."
    fi
}

# == restore default == 

restore_default() {
    log "Restoring the hosts file to its default state with updates..."
    HOST_URL="https://raw.githubusercontent.com/Magisk-Modules-Alt-Repo/Malwack/main/system/etc/hosts"
    HOST_ONLINE_URL="https://raw.githubusercontent.com/Magisk-Modules-Alt-Repo/Malwack/refs/heads/main/urls.txt"
    TIMEOUT=60

    chmod 644 "$HOSTS_FILE"
    if timeout "$TIMEOUT" curl -s "$HOST_URL" -o "$TEMP_FILE"; then
        [ -f "$HOSTS_FILE" ] && rm -f "$HOSTS_FILE"
        cp "$TEMP_FILE" "$HOSTS_FILE"
        chmod 644 "$HOSTS_FILE"
        echo "$HOST_ONLINE_URL" > "$URLS_FILE"
        log "Hosts file restored to the default state and updated successfully."
        rm -f "$TEMP_FILE"
    else
        abort "Failed to download the default hosts file from $HOST_URL."
    fi
}




# ===  Help Menu ===

show_help() {
    echo "Usage: malwack [OPTIONS]"
    echo "Options:"
    echo "  --restore-original    : Restore the hosts file to its original state (No blocking)"
    echo "  --restore-default     : Restore the hosts file to the module's default state & update it"
    echo "  --blockporn           : Block pornographic websites"
    echo "  --whitelist <domain>  : Remove the specified domain from the hosts file"
    echo "  --add-hosts <url>     : Add custom hosts from specified URL"
    echo "  --list-hosts          : List all custom hosts sources"
    echo "  --remove-hosts <url>  : Remove hosts from specified URL"
    echo "  --update-hosts        : Update all custom hosts"
    echo "  --block-url <url>     : Block a custom url."
    echo "  --block-app <pkg>     : Block internet access for specified package"
    echo "  --unblock-app <pkg>   : Unblock internet access for specified package"
    echo "  --list-app            : List all blocked apps"
    echo "  --help                : Display this help message"
}


# == Usage==


case "$1" in
    --restore-original)
        restore_original
        ;;
    --blockporn)
        block_porn
        ;;
    --whitelist)
        whitelist_domain "$2"
        ;;
    --restore-default)
        restore_default
        ;;
    --add-hosts)
        add_hosts "$2"
        ;;
    --list-hosts)
        list_hosts
        ;;
    --remove-hosts)
        remove_hosts "$2"
        ;;
    --update-hosts)
        update_hosts
        ;;
    --block-app)
        block_app "$2"
        ;;
    --unblock-app)
        unblock_app "$2"
        ;;
    --list-app)
        list_blocked_apps
        ;;
    --block-url)
        custom_url "$2"
        ;;
    --help)
        show_help
        ;;
    *)
        echo "Invalid option. Use 'malwack --help' for usage information."
        ;;
esac
